#include "StdAfx.h"

#include "MPManager.h"
#include "MPManagerModeNoNet.hpp"
#include "MPManagerModeLAN.hpp"
#include "MPManagerModeNivalNet.hpp"
#include "GameXClassIDs.h"
#include "../Main/MainLoop.h"
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CMPManager - general methods
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
REGISTER_SAVELOAD_CLASS( 0x1911AAC0, CMPManager )
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
IMPToUIManager *CreateMPManager()
{
	CMPManager *pManager = new CMPManager;
	return pManager;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CMPManager::CMPManager()
{
	REGISTER_MPUI_MESSAGE_HANDLER( EMUI_UNKNOWN, SMPUIMessage, OnUnknownMessage );
	REGISTER_MPUI_MESSAGE_HANDLER( EMUI_NO_NET, SMPUIMessage, OnNoNetMessage );
	REGISTER_MPUI_MESSAGE_HANDLER( EMUI_NIVAL_NET, SMPUIMessage, OnNivalNetMessage );
	REGISTER_MPUI_MESSAGE_HANDLER( EMUI_LAN_NET, SMPUIMessage, OnLANNetMessage );

	REGISTER_MPUI_MESSAGE_HANDLER( EMUI_BACK_FROM_GAME_LIST, SMPUIMessage, OnBackFromGameListMessage );

	pCurrentNetMode = new CMPManagerModeNoNet;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CMPManager::~CMPManager() 
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMPManager::AddUIMessage( SMPUIMessage *_pMsg )
{
	CPtr<SMPUIMessage> pMsg = _pMsg;
	bool bResult = false;
	if ( pCurrentNetMode )
		bResult = pCurrentNetMode->HandleMessage( _pMsg );
	if ( !bResult )
		bResult = HandleMessage( pMsg );

	NI_ASSERT( bResult, "Unhandled MP to UI message" );
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMPManager::AddUIMessage( EMPUIMessageType eMessageType )
{
	AddUIMessage( new SMPUISimpleMessage( eMessageType ) );
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
SMPUIMessage* CMPManager::GetUIMessage()
{
	return GetMessage();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
SMPUIMessage* CMPManager::PeekUIMessage()
{
	return PeekMessage();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CMPManager::MPUISegment()
{
	bool bResult = Segment();
	NI_ASSERT( bResult, "PacketProcessor: unhandled segment" );
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CMPManager::Segment()
{
	// Pass on messages
	while ( CPtr<SMPUIMessage> pMsg = pCurrentNetMode->GetMessage() )
		PushMessage( pMsg );

	return pCurrentNetMode->Segment();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CMPManager::OnUnknownMessage( SMPUIMessage *pMsg )
{
	NI_ASSERT( 0, "Uninitialized MP to UI message type" );
	return true;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CMPManager::OnNoNetMessage( SMPUIMessage *pMsg )
{
	pCurrentNetMode = 0;
	pCurrentNetMode = new CMPManagerModeNoNet;

	return true;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CMPManager::OnNivalNetMessage( SMPUIMessage *pMsg )
{
	pCurrentNetMode = 0;
	pCurrentNetMode = new CMPManagerModeNivalNet;

	return true;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CMPManager::OnLANNetMessage( SMPUIMessage *pMsg )
{
	pCurrentNetMode = 0;
	pCurrentNetMode = new CMPManagerModeLAN;

	return true;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CMPManager::OnBackFromGameListMessage( SMPUIMessage *pMsg )
{
	if ( pCurrentNetMode->GetMode() == CMPManagerMode::ENM_NIVAL_NET )
	{
		NMainLoop::Command( ML_COMMAND_MP_GAME_LOBBY, "" );
	}
	else
	{
		NMainLoop::Command( ML_COMMAND_MULTIPLAYER_MENU, "" );
		OnNoNetMessage( 0 );
	}

	return true;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
