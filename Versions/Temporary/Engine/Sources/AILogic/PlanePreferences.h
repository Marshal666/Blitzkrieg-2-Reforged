/* Generated by Together */

#ifndef CPLANEPREFERENCES_H
#define CPLANEPREFERENCES_H

//#include "RPGSTats.h"
#pragma once
/**
 * 1) У самолета есть список маневров, которые он может совершать (с весами).
 * при выборе маневра CManuverBuilder смотрит в этот список и выбирает нужный маневр.
 * 2) у самолета есть параметры для определения того, что скорость малая...предельная, для.
 * 3) содержит в себе нечеткую логику самолета.
 */
namespace NDb
{
	struct SMechUnitRPGStats;
	enum EManuverID;
}
class CPlanePreferences 
{
	ZDATA
	CDBPtr<SMechUnitRPGStats> pStats;
	bool bCanViolateHeghtLimits;
public:
	ZEND int operator&( IBinSaver &f ) { f.Add(2,&pStats); f.Add(3,&bCanViolateHeghtLimits); return 0; }

	void Init( const SMechUnitRPGStats* _pStats, bool bCanViolateHeghtLimits );
	void SetCanViolateHeghtLimits() { bCanViolateHeghtLimits = true; }
	float GetPatrolHeight() const;
	// maneuver radius for current speed
	float GetR( const float fSpeed ) const;
	float GetStallSpeed() const;
	float GetMaxSpeed() const;
	// tilt in WORD per millisecond
	float GetTiltSpeed() const;
	// tilt acceleration in WORD per millisecond^2
	float GetTiltAccell() const;
	bool IsManuverAllowed( const enum NDb::EManuverID eManuver ) const;
	float GetSpeed( const float fZ ) const;
	// can do "bochka"
	bool CanFlip() const;
	bool CanViolateHeghtLimits() const { return bCanViolateHeghtLimits; }
	WORD GetDivingAngle() const;
};
#endif //CPLANEPREFERENCES_H
