<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title></title>
		<meta content="Microsoft Visual Studio .NET 7.1" name="GENERATOR">
		<meta content="http://schemas.microsoft.com/intellisense/ie5" name="vs_targetSchema">
	</head>
	<body>
		<H1 align="center">
			Краткое описание UI системы</H1>
		<H2>Общее описание</H2>
		<P>UI система реализует 2D-интерфейс&nbsp;- оконную систему, включающую различные 
			контролы,&nbsp;и обработку различных событий и эффектов, связанных с нею.</P>
		<P>UI система реализована достаточно независимо. Она включает в себя две 
			основные&nbsp;части - собственно UI систему и ресурсы. Минимально для 
			ее&nbsp;задействования необходима графическая система (например, для показа 
			прогресса загрузки сохраненной игры). Для типичного использования необходимы 
			также: сообщения от ввода (система ввода объединена с системой игровых 
			сообщений), таймер (сегмент), обработчик реакций (специфическая для UI обратная 
			связь). Часто также используется система игровых сообщений.</P>
		<P>В целом, UI система реализована как открытая, главным образом через 
			написание&nbsp;проектно-специфических контролов 
			и&nbsp;обработчиков.&nbsp;Изменение и расширение общей части производится 
			только при серьезной необходимости.</P>
		<P>Работа с UI системой производится на двух уровнях. Первый - использование 
			готовых элементов, второй - расширение системы за счет написания 
			проектно-специфических. Ключевой элемент&nbsp;при использовании UI - экран 
			(IScreen), координирующий работу всех механизмов,&nbsp;общий интерфейс&nbsp;для 
			всех контролов - IWindow.&nbsp;Основным элементом&nbsp;для реализации контролов 
			является CWindow, реализующий базовую функциональность окна, от него 
			наследуются все прочие контролы.</P>
		<P>UI система используется в клиенте главным образом через интерфейсы (наследники 
			от IInterfaceBase). Типичное исключение - реализация экрана загрузки 
			сохраненной игры. (Вообще, использование UI - отдельная тема, поскольку 
			задействует также другие системы игры.)
		</P>
		<P>Весь интерфейс общей части UI системы описан в заголовочном файле “..\UI\UI.h”. 
			Интерфейс ресурсов&nbsp;UI&nbsp;- "..\UI\DBUserInterface.h". Использование 
			других файлов из общей части необходимо только для написания 
			проектно-специфических&nbsp;контролов и обработчиков.
		</P>
		<H2>Основные элементы UI системы</H2>
		<H3>Ресурсы</H3>
		<P>Основной механизм создания элементов UI - на основе данных из ресурсов. 
			Непосредственное создание обычно не предусмотрено. Ресурсы описывают контролы 
			практически полностью, включая дочерние окна, реакции и пр. Как правило, 
			каждому классу элементов UI соответствует свой тип в ресурсах.</P>
		<P>Описание контрола в ресурсах как правило разделено на две части: instance и 
			shared.&nbsp;Instance обычно содержит данные, уникальные для контрола: имя, 
			расположение, реакции и т.д. Shared по большей части включает поля, которые 
			могут быть общими для нескольких контролов: графическое представление, список 
			детей и т.д. Часть полей в instance и shared может дублироваться, в этом случае 
			какое именно поле будет использоваться задается в instance.
		</P>
		<P>И instance, и shared представлены в&nbsp;ресурсах как отдельные объекты и могут 
			быть использованы многократно в других контролах. Это сделано, чтобы не 
			приходилось дублировать одинаковые данные или их части (например, скролбар или 
			общее оформление кнопок в меню).
		</P>
		<P>Необходимо отметить, что многократное использование одного и того же объекта в 
			составе других - особенность именно ресурсной части. В коде каждый раз будет 
			создан уникальный экземпляр, хотя и по одному и тому же образцу.</P>
		<P>Создание элементов на основе ресурсов отнюдь не исключает возможность работы с 
			динамическими интерфейсами.&nbsp;Для этого, как правило, все образцы также 
			должны быть описаны в ресурсах.</P>
		<H3>Контролы</H3>
		<P>В UI&nbsp;реализована оконная система, основным элементом которой является окно 
			(IWindow). Основные ее задачи - отрисовка интерфейса и обработка различных 
			сообщений, в частности от клавиатуры и мыши.</P>
		<P>Все окна являются контейнерами. Идентификатором окна является его имя, по имени 
			можно получить&nbsp;дочернее окно&nbsp;у его родителя. Явное создание окна 
			осуществляется по его описателю - NDb::SUIDesc. Описатель можно получить 
			у&nbsp;любого окна, чаще всего в качестве шаблона используется какое-нибудь 
			невидимое окно в интерфейсе. Можно вставлять и убирать&nbsp;контролы из других 
			окон. (У каждого окна в каждый момент времени может быть только один родитель - 
			за этим следит система.) Составные контролы, в т.ч. формируемые динамически, 
			используются очень часто. (В&nbsp;ресурсах список детей задается в&nbsp;массиве 
			"Children"&nbsp;в&nbsp;shared части. Также с&nbsp;детьми можно работать через 
			интерфейс окна. Название окна задается&nbsp;в ресурсах в поле "Name" в instance 
			части. Его также можно&nbsp;менять через интерфейс.)</P>
		<P>Приоритет. Порядок расположения окон внутри родителя задается приоритетом, чем 
			выше приоритет, тем&nbsp;ближе расположено окно. Порядок отрисовки окон с 
			одинаковым приоритетом не определен. (В ресурсах приоритет задается в поле 
			"Priority"&nbsp;в instance части. Его также можно&nbsp;менять через интерфейс 
			окна.)</P>
		<P>Расположение окна. Задается относительно родительского. Параметры расположения 
			задаются независимо по каждой координате. Можно задавать либо смещение и размер 
			окна, либо отступы от краев. Смещение может быть задано от одного из краев, 
			либо от центра. (В ресурсах расположение задается в поле "Placement"&nbsp;как в 
			instance, так&nbsp;и в shared&nbsp;части.)</P>
		<P>Каждое окно может быть сделано видимым или невидимым. (В ресурсах видимость 
			задается в поле "Visible"&nbsp;в instance части. Ее также можно менять через 
			интерфейс окна.)</P>
		<P>Окно может быть активным или неактивным (не обрабатывать ввод и клики). (В 
			ресурсах активность задается в поле "Enabled"&nbsp;в instance части. Ее также 
			можно менять через интерфейс окна.)</P>
		<P>Фокус ввода. Используется для работы некоторых контролов, например, строки 
			ввода. Контрол получает фокус ввода при клике на него мышью и теряет его при 
			клике в любой другой контрол. (Фокус&nbsp;можно менять&nbsp;через интерфейс 
			окна.)</P>
		<P>Окно может быть сделано "прозрачным для кликов" (включая всех потомков), т.е. 
			реагировать на клики так, как будто его вообще нет на экране. Задается в shared 
			части в ресурсах. Часто используется для иконок, заданных как дочерние 
			окна&nbsp;в различных кнопках, и т.д. (В ресурсах "прозрачность для кликов" 
			задается в поле "Flags/Transparent"&nbsp;в&nbsp;shared части.)</P>
		<P>Графика в окне. Есть подложка и передний план. Подложка рисуется под всеми 
			детьми, передний план - сверху. Могут использоваться простые текстуры - не 
			переразмериваются, растягиваемые - заполняют весь размер 
			окна,&nbsp;либо&nbsp;тайлящиеся - составляются из 9 частей (углы, боковины, 
			центральная часть) и заполняют все окно,&nbsp;боковины и центральная часть при 
			этом дублируются необходимое число раз. Возможно проектно-специфическое 
			расширение, например, анимированные текстуры и т.д. (Подложка и передний план в 
			ресурсах для большинства классов окон задается в полях "Background", 
			"Foreground" shared части.)</P>
		<P>Область клика. Задается в shared части в ресурсах. Если есть - клики 
			обрабатываются только внутри данной замкнутой фигуры. (Область клика в ресурсах 
			задается в&nbsp;массиве "ActiveArea"&nbsp;в&nbsp;shared части.)</P>
		<P>Список обрабатываемых сообщений. Задается в instance части&nbsp;в ресурсах. 
			Каждое окно может иметь список игровых сообщений (в т.ч. сообщения от ввода), 
			на которое оно будет реагировать, если видимо и активно. В 
			ответ&nbsp;выполняются эффекторы. Обработанное сообщение другим окнам не 
			отправляется. Чаще всего используется для&nbsp;реакции на&nbsp;горячие клавиши. 
			(Список обрабатываемых сообщений в ресурсах задается в массиве 
			"GameMessageReactions" в instance части.)</P>
		<P>Тултип. Строка, которая будет автоматически показываться в специальном окне. 
			(Тултип в ресурсах задается в поле "Tooltip" в instance части.)</P>
		<P>Модальность. Контролами UI не поддерживается. (Обычно легко эмулируется, 
			достаточно все элементы сразу помещать в одно окно размером во весь экран, 
			которое затем целиком деактивировать во время показа "модального".)</P>
		<P>Некоторые часто используемые контролы:</P>
		<UL>
			<LI>
			Screen - родительский контрол для всех прочих. Стандартный размер экрана 
			1024x768. Содержит список, позволяющий запустить цепочку эффекторов по ее 
			имени;
			<LI>
			WindowSimple - простейшее окно, часто используется как контейнер или для 
			отрисовки графики;
			<LI>
			MSButton - кнопка, может иметь несколько состояний. В каждом состоянии может 
			находиться в&nbsp;нескольких фазах: обычная, с наведенной мышью, нажатая, 
			выключенная. Состояния переключаются&nbsp;вручную или автоматически, если 
			кнопка в группе. Используется для обработки всевозможных нажатий;
			<LI>
			TextView - нескролируемый текст в одну или несколько строк;
			<LI>
			EditLine - строка ввода;
			<LI>
				ScrollableContainer, ListControl - различные списки с возможностью 
				скроллирования.</LI></UL>
		<H3>Эффекторы</H3>
		<P>В общем случае выполняют какие-либо продолжительные действия (поэтому их также 
			называют "states"). Например, определенным образом перемещают контрол по 
			экрану. Другие примеры -&nbsp;проигрывание звука, эффект нажатия на кнопку.</P>
		<P>Важный частный случай эффектора - запуск реакции. Реакция выполняет какую-нибудь 
			мгновенную операцию. Реакция запускается либо по имени, либо непосредственно. 
			(Эффектор&nbsp;на запуск реакции по&nbsp;имени в &nbsp;ресурсах&nbsp;имеет тип 
			UISRunReaction. Эффектор на непосредственный запуск реакции в ресурсах имеет 
			тип UISDirectRunReaction.)</P>
		<P>Очень часто&nbsp;реакции используются для организации обратной связи.&nbsp;В 
			случае, когда реакция запускается по имени, она предварительно передается 
			внешнему обработчику. (Затем реакция передается на обработку в экран, но это 
			неудобный, устаревший механизм.) Передаваемые параметры - название реакции и 
			имя запустившего окна. Широко используются&nbsp;при работе&nbsp;с кнопками, 
			когда надо знать, от кого именно пришло сообщение. Незаменимый метод, когда 
			важно, чтобы не задействовались другие механизмы игры, например,&nbsp;нужно 
			узнать об окончании&nbsp;визуального эффекта на заставке загрузки сохраненой 
			игры.</P>
		<P>Для организации обратной связи часто используется реакция, отправляющая игровое 
			сообщение. Удобно использовать в простых случаях. (Реакция отправки игрового 
			сообщения в ресурсах имеет тип ARSendGameMessage.)</P>
		<P>Стандартных эффекторов немного. Необходимость в специфических эффекторах сильно 
			зависит от конкретного проекта. Сейчас опыт использования различных эффекторов, 
			в частности, для реализации собственно интерфейсных эффектов&nbsp;относительно 
			небольшой, возможно, систему можно сделать существенно более удобной.</P>
		<H2>Инструментарий</H2>
		<H3>Редактор</H3>
		<P>Поддерживает два основных метода редактирования. Первый - через дерево объектов. 
			Второй - через preview-editor. Первый метод универсален и позволяет 
			контролировать все детали реализации. Preview-editor позволяет быстро 
			посмотреть визуальное представление экрана и отдельных контролов 
			не&nbsp;запуская игру, а также осуществить простейшее редактирование.
		</P>
		<H4>Preview-editor</H4>
		<P>Preview-editor запускается командой “Edit Selection” в pop-up menu. Превью 
			работает для всех&nbsp;instance&nbsp;частей окон, а также для 
			WindowScreenShared, WindowSimpleShared. Также можно менять координаты контролов 
			(в instance части) мышью/стрелками.
		</P>
		<P>При запуске preview-editor на instance части окон возможности редактирования в 
			полном объеме не проверялись, run-mode не поддерживается.</P>
		<P><EM>Команды preview-editor:</EM></P>
		<P>LB mouse click - select child</P>
		<P>Shift + Ctrl + LB mouse click - insert child at given point<BR>
			LB mouse click + DRAG - move selected child<BR>
			DEL - delete selected child</P>
		<P>Enter - load editor for selected child (push)
			<BR>
			Backspace - return to parent (pop)
		</P>
		<P>TAB - enter/leave the run-mode</P>
	</body>
</html>
